{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/NiftyItemSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/IERC1155SupplyUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20PresetMinterPauserUpgradeable.sol\\\";\\nimport \\\"./interfaces/INiftyEquipment.sol\\\";\\n\\ncontract NiftyItemSale is OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event ItemPurchased(address indexed by, uint256[] itemIds, uint256[] amounts);\\n  event ItemPriceSet(address indexed by, uint256 itemId, uint256 oldItemPrice, uint256 newItemPrice);\\n  event ItemMaxCountSet(address indexed by, uint256 itemId, uint256 oldItemMaxCount, uint256 newItemMaxCount);\\n  event TokenPercentagesUpdated(address indexed by, uint256 oldBurnPercentage, uint256 oldTreasuryPercentage, uint256 oldDAOPercentage, uint256 newBurnPercentage, uint256 newTreasuryPercentage, uint256 newDAOPercentage);\\n  event NFTLWitdraw(address indexed by, uint256 burnAmount, uint256 treasuryAmount, uint256 daoAmount);\\n\\n  /// @dev NiftyItems address\\n  address public items;\\n\\n  /// @dev NFTL token address\\n  address public nftl;\\n\\n  /// @dev ItemID -> NFTL token amount (price)\\n  mapping(uint256 => uint256) public itemPrices;\\n  \\n  /// @dev ItemID -> Max Count\\n  mapping(uint256 => uint256) public itemMaxCounts;\\n\\n  /// @dev Treasury address\\n  address public treasury;\\n\\n  /// @dev DAO address\\n  address public dao;\\n\\n  /// @dev NFTL token burn percentage\\n  uint256 public burnPercentage;\\n\\n  /// @dev NFTL token percentage to the treasury\\n  uint256 public treasuryPercentage;\\n\\n  /// @dev NFTL token percentage to the DAO\\n  uint256 public daoPercentage;\\n \\n  function initialize(\\n    address _items,\\n    address _nftl,\\n    address _treasury,\\n    address _dao,\\n    uint256 _burnPercentage,\\n    uint256 _treasuryPercentage,\\n    uint256 _daoPercentage\\n  ) public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n\\n    require(_burnPercentage + _treasuryPercentage + _daoPercentage == 1000, \\\"Invalid percentages\\\");\\n\\n    items = _items;\\n    nftl = _nftl;\\n    treasury = _treasury;\\n    dao = _dao;\\n    burnPercentage = _burnPercentage;\\n    treasuryPercentage = _treasuryPercentage;\\n    daoPercentage = _daoPercentage;\\n  }\\n\\n  /**\\n   * @notice Purchase items\\n   * @dev User can purchase the several items at once and itemId must be greater than 6\\n   * @dev Item total supply can't exceed the max count\\n   * @dev Item price is set using the NFTL token amount\\n   * @param _itemIds Item ID list\\n   * @param _amounts Item amount list\\n   */\\n  function purchaseItems(uint256[] calldata _itemIds, uint256[] calldata _amounts) external nonReentrant whenNotPaused {\\n    require(_itemIds.length == _amounts.length, \\\"Mismatched params\\\");\\n\\n    // get total price\\n    uint256 totalPrice;\\n    for (uint256 i; i < _itemIds.length; i++) {\\n      require(_itemIds[i] > 6, \\\"Token ID less than 7\\\");\\n      require(itemPrices[_itemIds[i]] > 0, \\\"Zero price\\\");\\n      require(IERC1155SupplyUpgradeable(items).totalSupply(_itemIds[i]) + _amounts[i] <= itemMaxCounts[_itemIds[i]], \\\"Max count overflow\\\");\\n\\n      totalPrice += itemPrices[_itemIds[i]] * _amounts[i];\\n    }\\n\\n    // purchase items\\n    IERC20Upgradeable(nftl).safeTransferFrom(msg.sender, address(this), totalPrice);\\n    INiftyEquipment(items).mintBatch(msg.sender, _itemIds, _amounts, bytes(\\\"\\\"));\\n\\n    emit ItemPurchased(msg.sender, _itemIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Set item prices\\n   * @dev Only owner\\n   * @dev Owner can set the several item prices at once\\n   * @dev Item price can't be less than 1 NFTL\\n   * @param _itemIds Item ID list\\n   * @param _nftlAmounts Item price list specified by the NFTL token amounts\\n   */\\n  function setItemPrices(uint256[] calldata _itemIds, uint256[] calldata _nftlAmounts) external onlyOwner {\\n    require(_itemIds.length == _nftlAmounts.length, \\\"Mismatched params\\\");\\n\\n    // set the item price\\n    for (uint256 i; i < _itemIds.length; i++) {\\n      require(_itemIds[i] > 6, \\\"Token ID less than 7\\\");\\n      require(_nftlAmounts[i] >= 10**18, \\\"Price less than 1 NFTL\\\");\\n      \\n      emit ItemPriceSet(msg.sender, _itemIds[i], itemPrices[_itemIds[i]], _nftlAmounts[i]);\\n\\n      itemPrices[_itemIds[i]] = _nftlAmounts[i];\\n    }\\n  }\\n\\n  /**\\n   * @notice Set the item max counts\\n   * @dev Only owner\\n   * @dev Owner can set the several item max counts at once\\n   * @dev Max count can't be less than the current total supply\\n   * @param _itemIds Item ID list\\n   * @param _maxCounts Item max count list\\n   */\\n  function setItemMaxCounts(uint256[] calldata _itemIds, uint256[] calldata _maxCounts) external onlyOwner {\\n    require(_itemIds.length == _maxCounts.length, \\\"Mismatched params\\\");\\n\\n    // set the item max count\\n    for (uint256 i; i < _itemIds.length; i++) {\\n      // check if the max count is smaller than the current total supply\\n      require(_maxCounts[i] >= IERC1155SupplyUpgradeable(items).totalSupply(_itemIds[i]), \\\"Max count less than total supply\\\");\\n\\n      emit ItemMaxCountSet(msg.sender, _itemIds[i], itemMaxCounts[_itemIds[i]], _maxCounts[i]);\\n\\n      itemMaxCounts[_itemIds[i]] = _maxCounts[i];\\n    }\\n  }\\n\\n  /**\\n   * @notice Update the token distribution percentages\\n   * @dev Only owner\\n   * @dev Max percentage is 1000\\n   * @param _burnPercentage Percentage to burn\\n   * @param _treasuryPercentage Percentage to the treasury address\\n   * @param _daoPercentage Percentage to the DAO address\\n   */\\n  function updateTokenPercentages(uint256 _burnPercentage, uint256 _treasuryPercentage, uint256 _daoPercentage) external onlyOwner {\\n    require(_burnPercentage + _treasuryPercentage + _daoPercentage == 1000, \\\"Invalid percentages\\\");\\n\\n    emit TokenPercentagesUpdated(msg.sender, burnPercentage, treasuryPercentage, daoPercentage, _burnPercentage, _treasuryPercentage, _daoPercentage);\\n\\n    // update the percentages\\n    burnPercentage = _burnPercentage;\\n    treasuryPercentage = _treasuryPercentage;\\n    daoPercentage = _daoPercentage;\\n  }\\n\\n  /**\\n   * @notice Withdraw NFTL tokens locked on the contract\\n   * @dev Only owner\\n   * @dev Some of tokens are burnt and the remaing ones are transferred to the treasury and DAO addresses\\n   */\\n  function withdraw() external onlyOwner {\\n    uint256 nftlBalance = IERC20Upgradeable(nftl).balanceOf(address(this));\\n    \\n    // get the burnAmount, treasuryAmount and daoAmount\\n    uint256 burnAmount = nftlBalance * burnPercentage / 1000;\\n    uint256 treasuryAmount = nftlBalance * treasuryPercentage / 1000;\\n    uint256 daoAmount = nftlBalance - burnAmount - treasuryAmount;\\n\\n    // trasnfer tokens\\n    IERC20PresetMinterPauserUpgradeable(nftl).burn(burnAmount);\\n    IERC20Upgradeable(nftl).safeTransfer(treasury, treasuryAmount);\\n    IERC20Upgradeable(nftl).safeTransfer(dao, daoAmount);\\n\\n    emit NFTLWitdraw(msg.sender, burnAmount, treasuryAmount, daoAmount);\\n  }\\n\\n  /**\\n   * @notice Pause the sale\\n   * @dev Only owner\\n   */\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Unpause the sale\\n   * @dev Only owner\\n   */\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"contracts/interfaces/IERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IERC1155SupplyUpgradeable is IERC1155Upgradeable {\\n  function totalSupply(uint256 id) external view returns (uint256);\\n}\\n\"},\"contracts/interfaces/IERC20PresetMinterPauserUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20PresetMinterPauserUpgradeable is IERC20Upgradeable {\\n  function burn(uint256 amount) external;\\n}\\n\"},\"contracts/interfaces/INiftyEquipment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface INiftyEquipment {\\n  function mintBatch(\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  ) external;\\n\\n  function mint(\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  ) external;\\n}\\n\"}}}","address":"0x1DeddbD06c53B21cE44e91ABA44a323310583B86","bytecode":"0x608060405234801561001057600080fd5b50611ca8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80637ab56083116100b8578063bf91ad9e1161007c578063bf91ad9e14610247578063bf9dc86a14610267578063c06fad0614610287578063e77fc7a41461029a578063f01f20df146102ad578063f2fde38b146102b657600080fd5b80637ab56083146101fb5780638456cb5914610212578063868661cb1461021a5780638da5cb5b1461022357806396e851ab1461023457600080fd5b80634162169f116100ff5780634162169f146101875780634e81da0a146101b75780635c975abb146101ca57806361d027b3146101e0578063715018a6146101f357600080fd5b80630e22d59b1461013c5780630e55d70c146101515780631d8d71f0146101645780633ccfd60b146101775780633f4ba83a1461017f575b600080fd5b61014f61014a366004611974565b6102c9565b005b61014f61015f3660046118bb565b6103c5565b61014f6101723660046118bb565b61064d565b61014f610ac0565b61014f610c9f565b60ce5461019a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60ca5461019a906001600160a01b031681565b60975460ff1660405190151581526020016101ae565b60cd5461019a906001600160a01b031681565b61014f610cd3565b61020460d05481565b6040519081526020016101ae565b61014f610d07565b61020460d15481565b6033546001600160a01b031661019a565b61014f6102423660046118bb565b610d39565b610204610255366004611944565b60cb6020526000908152604090205481565b610204610275366004611944565b60cc6020526000908152604090205481565b60c95461019a906001600160a01b031681565b61014f6102a836600461184d565b610ff1565b61020460cf5481565b61014f6102c4366004611833565b611131565b6033546001600160a01b031633146102fc5760405162461bcd60e51b81526004016102f390611afc565b60405180910390fd5b806103078385611ba7565b6103119190611ba7565b6103e8146103575760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642070657263656e746167657360681b60448201526064016102f3565b60cf5460d05460d15460408051938452602084019290925290820152606081018490526080810183905260a0810182905233907fe40b11ca40e9f152af537db8dc8c682648bd89d6cad4587db31993922b5a7e7d9060c00160405180910390a260cf9290925560d05560d155565b6033546001600160a01b031633146103ef5760405162461bcd60e51b81526004016102f390611afc565b82811461040e5760405162461bcd60e51b81526004016102f390611b31565b60005b8381101561064657600685858381811061043b57634e487b7160e01b600052603260045260246000fd5b90506020020135116104865760405162461bcd60e51b8152602060048201526014602482015273546f6b656e204944206c657373207468616e203760601b60448201526064016102f3565b670de0b6b3a76400008383838181106104af57634e487b7160e01b600052603260045260246000fd5b9050602002013510156104fd5760405162461bcd60e51b8152602060048201526016602482015275141c9a58d9481b195cdcc81d1a185b880c481391951360521b60448201526064016102f3565b337f68d829accea5a50e994ba8f0db95e96cb144e8518d7253e83b89e7b99a8cf70086868481811061053f57634e487b7160e01b600052603260045260246000fd5b9050602002013560cb600089898781811061056a57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020548686868181106105a057634e487b7160e01b600052603260045260246000fd5b905060200201356040516105c7939291909283526020830191909152604082015260600190565b60405180910390a28282828181106105ef57634e487b7160e01b600052603260045260246000fd5b9050602002013560cb600087878581811061061a57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002081905550808061063e90611c41565b915050610411565b5050505050565b600260655414156106a05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f3565b600260655560975460ff16156106eb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102f3565b82811461070a5760405162461bcd60e51b81526004016102f390611b31565b6000805b848110156109dc57600686868381811061073857634e487b7160e01b600052603260045260246000fd5b90506020020135116107835760405162461bcd60e51b8152602060048201526014602482015273546f6b656e204944206c657373207468616e203760601b60448201526064016102f3565b600060cb60008888858181106107a957634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054116107f95760405162461bcd60e51b815260206004820152600a6024820152695a65726f20707269636560b01b60448201526064016102f3565b60cc600087878481811061081d57634e487b7160e01b600052603260045260246000fd5b9050602002013581526020019081526020016000205484848381811061085357634e487b7160e01b600052603260045260246000fd5b60c95460209091029290920135916001600160a01b0316905063bd85b03989898681811061089157634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016108b691815260200190565b60206040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610906919061195c565b6109109190611ba7565b11156109535760405162461bcd60e51b81526020600482015260126024820152714d617820636f756e74206f766572666c6f7760701b60448201526064016102f3565b83838281811061097357634e487b7160e01b600052603260045260246000fd5b9050602002013560cb600088888581811061099e57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020546109be9190611bdf565b6109c89083611ba7565b9150806109d481611c41565b91505061070e565b5060ca546109f5906001600160a01b03163330846111cc565b60c95460408051602081018252600081529051630fbfeffd60e11b81526001600160a01b0390921691631f7fdffa91610a3b9133918a918a918a918a9190600401611a1b565b600060405180830381600087803b158015610a5557600080fd5b505af1158015610a69573d6000803e3d6000fd5b50505050336001600160a01b03167f2984a062306d2c08d91ade1337420532e9438d57c2dd5b19b7cb3dbb17230c9486868686604051610aac9493929190611a74565b60405180910390a250506001606555505050565b6033546001600160a01b03163314610aea5760405162461bcd60e51b81526004016102f390611afc565b60ca546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610b2e57600080fd5b505afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b66919061195c565b905060006103e860cf5483610b7b9190611bdf565b610b859190611bbf565b905060006103e860d05484610b9a9190611bdf565b610ba49190611bbf565b9050600081610bb38486611bfe565b610bbd9190611bfe565b60ca54604051630852cd8d60e31b8152600481018690529192506001600160a01b0316906342966c6890602401600060405180830381600087803b158015610c0457600080fd5b505af1158015610c18573d6000803e3d6000fd5b505060cd5460ca54610c3993506001600160a01b039081169250168461123d565b60ce5460ca54610c56916001600160a01b0391821691168361123d565b604080518481526020810184905290810182905233907f63895a06532581c620ae1971802a5d56eb36cd7057450604c025260c24b333d79060600160405180910390a250505050565b6033546001600160a01b03163314610cc95760405162461bcd60e51b81526004016102f390611afc565b610cd1611272565b565b6033546001600160a01b03163314610cfd5760405162461bcd60e51b81526004016102f390611afc565b610cd16000611305565b6033546001600160a01b03163314610d315760405162461bcd60e51b81526004016102f390611afc565b610cd1611357565b6033546001600160a01b03163314610d635760405162461bcd60e51b81526004016102f390611afc565b828114610d825760405162461bcd60e51b81526004016102f390611b31565b60005b838110156106465760c9546001600160a01b031663bd85b039868684818110610dbe57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610de391815260200190565b60206040518083038186803b158015610dfb57600080fd5b505afa158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e33919061195c565b838383818110610e5357634e487b7160e01b600052603260045260246000fd5b905060200201351015610ea85760405162461bcd60e51b815260206004820181905260248201527f4d617820636f756e74206c657373207468616e20746f74616c20737570706c7960448201526064016102f3565b337ff28265c485be16f26bcbad6982414412aa39c7d6d4b5523d38eee7938f04665c868684818110610eea57634e487b7160e01b600052603260045260246000fd5b9050602002013560cc6000898987818110610f1557634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054868686818110610f4b57634e487b7160e01b600052603260045260246000fd5b90506020020135604051610f72939291909283526020830191909152604082015260600190565b60405180910390a2828282818110610f9a57634e487b7160e01b600052603260045260246000fd5b9050602002013560cc6000878785818110610fc557634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020819055508080610fe990611c41565b915050610d85565b6000610ffd60016113d2565b90508015611015576000805461ff0019166101001790555b61101d61145f565b61102561148e565b61102d6114bd565b816110388486611ba7565b6110429190611ba7565b6103e8146110885760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642070657263656e746167657360681b60448201526064016102f3565b60c980546001600160a01b03808b166001600160a01b03199283161790925560ca80548a841690831617905560cd805489841690831617905560ce80549288169290911691909117905560cf84905560d083905560d18290558015611127576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6033546001600160a01b0316331461115b5760405162461bcd60e51b81526004016102f390611afc565b6001600160a01b0381166111c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f3565b6111c981611305565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526112379085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526114ec565b50505050565b6040516001600160a01b03831660248201526044810182905261126d90849063a9059cbb60e01b90606401611200565b505050565b60975460ff166112bb5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102f3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff161561139d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102f3565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112e83390565b60008054610100900460ff1615611419578160ff1660011480156113f55750303b155b6114115760405162461bcd60e51b81526004016102f390611aae565b506000919050565b60005460ff8084169116106114405760405162461bcd60e51b81526004016102f390611aae565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166114865760405162461bcd60e51b81526004016102f390611b5c565b610cd16115be565b600054610100900460ff166114b55760405162461bcd60e51b81526004016102f390611b5c565b610cd16115ee565b600054610100900460ff166114e45760405162461bcd60e51b81526004016102f390611b5c565b610cd161161c565b6000611541826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661164f9092919063ffffffff16565b80519091501561126d578080602001905181019061155f9190611924565b61126d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102f3565b600054610100900460ff166115e55760405162461bcd60e51b81526004016102f390611b5c565b610cd133611305565b600054610100900460ff166116155760405162461bcd60e51b81526004016102f390611b5c565b6001606555565b600054610100900460ff166116435760405162461bcd60e51b81526004016102f390611b5c565b6097805460ff19169055565b606061165e8484600085611668565b90505b9392505050565b6060824710156116c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102f3565b6001600160a01b0385163b6117205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f3565b600080866001600160a01b0316858760405161173c91906119ff565b60006040518083038185875af1925050503d8060008114611779576040519150601f19603f3d011682016040523d82523d6000602084013e61177e565b606091505b509150915061178e828286611799565b979650505050505050565b606083156117a8575081611661565b8251156117b85782518084602001fd5b8160405162461bcd60e51b81526004016102f39190611a9b565b80356001600160a01b038116811461145a57600080fd5b60008083601f8401126117fa578182fd5b50813567ffffffffffffffff811115611811578182fd5b6020830191508360208260051b850101111561182c57600080fd5b9250929050565b600060208284031215611844578081fd5b611661826117d2565b600080600080600080600060e0888a031215611867578283fd5b611870886117d2565b965061187e602089016117d2565b955061188c604089016117d2565b945061189a606089016117d2565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080604085870312156118d0578384fd5b843567ffffffffffffffff808211156118e7578586fd5b6118f3888389016117e9565b9096509450602087013591508082111561190b578384fd5b50611918878288016117e9565b95989497509550505050565b600060208284031215611935578081fd5b81518015158114611661578182fd5b600060208284031215611955578081fd5b5035919050565b60006020828403121561196d578081fd5b5051919050565b600080600060608486031215611988578283fd5b505081359360208301359350604090920135919050565b81835260006001600160fb1b038311156119b7578081fd5b8260051b80836020870137939093016020019283525090919050565b600081518084526119eb816020860160208601611c15565b601f01601f19169290920160200192915050565b60008251611a11818460208701611c15565b9190910192915050565b6001600160a01b0387168152608060208201819052600090611a40908301878961199f565b8281036040840152611a5381868861199f565b90508281036060840152611a6781856119d3565b9998505050505050505050565b604081526000611a8860408301868861199f565b828103602084015261178e81858761199f565b60208152600061166160208301846119d3565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601190820152704d69736d61746368656420706172616d7360781b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115611bba57611bba611c5c565b500190565b600082611bda57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611bf957611bf9611c5c565b500290565b600082821015611c1057611c10611c5c565b500390565b60005b83811015611c30578181015183820152602001611c18565b838111156112375750506000910152565b6000600019821415611c5557611c55611c5c565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220430e56e61309be4bcb5a56d89816ac732aa09d7bd4ab186679f74874728aae3064736f6c63430008040033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101375760003560e01c80637ab56083116100b8578063bf91ad9e1161007c578063bf91ad9e14610247578063bf9dc86a14610267578063c06fad0614610287578063e77fc7a41461029a578063f01f20df146102ad578063f2fde38b146102b657600080fd5b80637ab56083146101fb5780638456cb5914610212578063868661cb1461021a5780638da5cb5b1461022357806396e851ab1461023457600080fd5b80634162169f116100ff5780634162169f146101875780634e81da0a146101b75780635c975abb146101ca57806361d027b3146101e0578063715018a6146101f357600080fd5b80630e22d59b1461013c5780630e55d70c146101515780631d8d71f0146101645780633ccfd60b146101775780633f4ba83a1461017f575b600080fd5b61014f61014a366004611974565b6102c9565b005b61014f61015f3660046118bb565b6103c5565b61014f6101723660046118bb565b61064d565b61014f610ac0565b61014f610c9f565b60ce5461019a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60ca5461019a906001600160a01b031681565b60975460ff1660405190151581526020016101ae565b60cd5461019a906001600160a01b031681565b61014f610cd3565b61020460d05481565b6040519081526020016101ae565b61014f610d07565b61020460d15481565b6033546001600160a01b031661019a565b61014f6102423660046118bb565b610d39565b610204610255366004611944565b60cb6020526000908152604090205481565b610204610275366004611944565b60cc6020526000908152604090205481565b60c95461019a906001600160a01b031681565b61014f6102a836600461184d565b610ff1565b61020460cf5481565b61014f6102c4366004611833565b611131565b6033546001600160a01b031633146102fc5760405162461bcd60e51b81526004016102f390611afc565b60405180910390fd5b806103078385611ba7565b6103119190611ba7565b6103e8146103575760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642070657263656e746167657360681b60448201526064016102f3565b60cf5460d05460d15460408051938452602084019290925290820152606081018490526080810183905260a0810182905233907fe40b11ca40e9f152af537db8dc8c682648bd89d6cad4587db31993922b5a7e7d9060c00160405180910390a260cf9290925560d05560d155565b6033546001600160a01b031633146103ef5760405162461bcd60e51b81526004016102f390611afc565b82811461040e5760405162461bcd60e51b81526004016102f390611b31565b60005b8381101561064657600685858381811061043b57634e487b7160e01b600052603260045260246000fd5b90506020020135116104865760405162461bcd60e51b8152602060048201526014602482015273546f6b656e204944206c657373207468616e203760601b60448201526064016102f3565b670de0b6b3a76400008383838181106104af57634e487b7160e01b600052603260045260246000fd5b9050602002013510156104fd5760405162461bcd60e51b8152602060048201526016602482015275141c9a58d9481b195cdcc81d1a185b880c481391951360521b60448201526064016102f3565b337f68d829accea5a50e994ba8f0db95e96cb144e8518d7253e83b89e7b99a8cf70086868481811061053f57634e487b7160e01b600052603260045260246000fd5b9050602002013560cb600089898781811061056a57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020548686868181106105a057634e487b7160e01b600052603260045260246000fd5b905060200201356040516105c7939291909283526020830191909152604082015260600190565b60405180910390a28282828181106105ef57634e487b7160e01b600052603260045260246000fd5b9050602002013560cb600087878581811061061a57634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002081905550808061063e90611c41565b915050610411565b5050505050565b600260655414156106a05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102f3565b600260655560975460ff16156106eb5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102f3565b82811461070a5760405162461bcd60e51b81526004016102f390611b31565b6000805b848110156109dc57600686868381811061073857634e487b7160e01b600052603260045260246000fd5b90506020020135116107835760405162461bcd60e51b8152602060048201526014602482015273546f6b656e204944206c657373207468616e203760601b60448201526064016102f3565b600060cb60008888858181106107a957634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054116107f95760405162461bcd60e51b815260206004820152600a6024820152695a65726f20707269636560b01b60448201526064016102f3565b60cc600087878481811061081d57634e487b7160e01b600052603260045260246000fd5b9050602002013581526020019081526020016000205484848381811061085357634e487b7160e01b600052603260045260246000fd5b60c95460209091029290920135916001600160a01b0316905063bd85b03989898681811061089157634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016108b691815260200190565b60206040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610906919061195c565b6109109190611ba7565b11156109535760405162461bcd60e51b81526020600482015260126024820152714d617820636f756e74206f766572666c6f7760701b60448201526064016102f3565b83838281811061097357634e487b7160e01b600052603260045260246000fd5b9050602002013560cb600088888581811061099e57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020546109be9190611bdf565b6109c89083611ba7565b9150806109d481611c41565b91505061070e565b5060ca546109f5906001600160a01b03163330846111cc565b60c95460408051602081018252600081529051630fbfeffd60e11b81526001600160a01b0390921691631f7fdffa91610a3b9133918a918a918a918a9190600401611a1b565b600060405180830381600087803b158015610a5557600080fd5b505af1158015610a69573d6000803e3d6000fd5b50505050336001600160a01b03167f2984a062306d2c08d91ade1337420532e9438d57c2dd5b19b7cb3dbb17230c9486868686604051610aac9493929190611a74565b60405180910390a250506001606555505050565b6033546001600160a01b03163314610aea5760405162461bcd60e51b81526004016102f390611afc565b60ca546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610b2e57600080fd5b505afa158015610b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b66919061195c565b905060006103e860cf5483610b7b9190611bdf565b610b859190611bbf565b905060006103e860d05484610b9a9190611bdf565b610ba49190611bbf565b9050600081610bb38486611bfe565b610bbd9190611bfe565b60ca54604051630852cd8d60e31b8152600481018690529192506001600160a01b0316906342966c6890602401600060405180830381600087803b158015610c0457600080fd5b505af1158015610c18573d6000803e3d6000fd5b505060cd5460ca54610c3993506001600160a01b039081169250168461123d565b60ce5460ca54610c56916001600160a01b0391821691168361123d565b604080518481526020810184905290810182905233907f63895a06532581c620ae1971802a5d56eb36cd7057450604c025260c24b333d79060600160405180910390a250505050565b6033546001600160a01b03163314610cc95760405162461bcd60e51b81526004016102f390611afc565b610cd1611272565b565b6033546001600160a01b03163314610cfd5760405162461bcd60e51b81526004016102f390611afc565b610cd16000611305565b6033546001600160a01b03163314610d315760405162461bcd60e51b81526004016102f390611afc565b610cd1611357565b6033546001600160a01b03163314610d635760405162461bcd60e51b81526004016102f390611afc565b828114610d825760405162461bcd60e51b81526004016102f390611b31565b60005b838110156106465760c9546001600160a01b031663bd85b039868684818110610dbe57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b8152600401610de391815260200190565b60206040518083038186803b158015610dfb57600080fd5b505afa158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e33919061195c565b838383818110610e5357634e487b7160e01b600052603260045260246000fd5b905060200201351015610ea85760405162461bcd60e51b815260206004820181905260248201527f4d617820636f756e74206c657373207468616e20746f74616c20737570706c7960448201526064016102f3565b337ff28265c485be16f26bcbad6982414412aa39c7d6d4b5523d38eee7938f04665c868684818110610eea57634e487b7160e01b600052603260045260246000fd5b9050602002013560cc6000898987818110610f1557634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054868686818110610f4b57634e487b7160e01b600052603260045260246000fd5b90506020020135604051610f72939291909283526020830191909152604082015260600190565b60405180910390a2828282818110610f9a57634e487b7160e01b600052603260045260246000fd5b9050602002013560cc6000878785818110610fc557634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020819055508080610fe990611c41565b915050610d85565b6000610ffd60016113d2565b90508015611015576000805461ff0019166101001790555b61101d61145f565b61102561148e565b61102d6114bd565b816110388486611ba7565b6110429190611ba7565b6103e8146110885760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642070657263656e746167657360681b60448201526064016102f3565b60c980546001600160a01b03808b166001600160a01b03199283161790925560ca80548a841690831617905560cd805489841690831617905560ce80549288169290911691909117905560cf84905560d083905560d18290558015611127576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6033546001600160a01b0316331461115b5760405162461bcd60e51b81526004016102f390611afc565b6001600160a01b0381166111c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f3565b6111c981611305565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526112379085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526114ec565b50505050565b6040516001600160a01b03831660248201526044810182905261126d90849063a9059cbb60e01b90606401611200565b505050565b60975460ff166112bb5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102f3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff161561139d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102f3565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112e83390565b60008054610100900460ff1615611419578160ff1660011480156113f55750303b155b6114115760405162461bcd60e51b81526004016102f390611aae565b506000919050565b60005460ff8084169116106114405760405162461bcd60e51b81526004016102f390611aae565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166114865760405162461bcd60e51b81526004016102f390611b5c565b610cd16115be565b600054610100900460ff166114b55760405162461bcd60e51b81526004016102f390611b5c565b610cd16115ee565b600054610100900460ff166114e45760405162461bcd60e51b81526004016102f390611b5c565b610cd161161c565b6000611541826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661164f9092919063ffffffff16565b80519091501561126d578080602001905181019061155f9190611924565b61126d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102f3565b600054610100900460ff166115e55760405162461bcd60e51b81526004016102f390611b5c565b610cd133611305565b600054610100900460ff166116155760405162461bcd60e51b81526004016102f390611b5c565b6001606555565b600054610100900460ff166116435760405162461bcd60e51b81526004016102f390611b5c565b6097805460ff19169055565b606061165e8484600085611668565b90505b9392505050565b6060824710156116c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102f3565b6001600160a01b0385163b6117205760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f3565b600080866001600160a01b0316858760405161173c91906119ff565b60006040518083038185875af1925050503d8060008114611779576040519150601f19603f3d011682016040523d82523d6000602084013e61177e565b606091505b509150915061178e828286611799565b979650505050505050565b606083156117a8575081611661565b8251156117b85782518084602001fd5b8160405162461bcd60e51b81526004016102f39190611a9b565b80356001600160a01b038116811461145a57600080fd5b60008083601f8401126117fa578182fd5b50813567ffffffffffffffff811115611811578182fd5b6020830191508360208260051b850101111561182c57600080fd5b9250929050565b600060208284031215611844578081fd5b611661826117d2565b600080600080600080600060e0888a031215611867578283fd5b611870886117d2565b965061187e602089016117d2565b955061188c604089016117d2565b945061189a606089016117d2565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080604085870312156118d0578384fd5b843567ffffffffffffffff808211156118e7578586fd5b6118f3888389016117e9565b9096509450602087013591508082111561190b578384fd5b50611918878288016117e9565b95989497509550505050565b600060208284031215611935578081fd5b81518015158114611661578182fd5b600060208284031215611955578081fd5b5035919050565b60006020828403121561196d578081fd5b5051919050565b600080600060608486031215611988578283fd5b505081359360208301359350604090920135919050565b81835260006001600160fb1b038311156119b7578081fd5b8260051b80836020870137939093016020019283525090919050565b600081518084526119eb816020860160208601611c15565b601f01601f19169290920160200192915050565b60008251611a11818460208701611c15565b9190910192915050565b6001600160a01b0387168152608060208201819052600090611a40908301878961199f565b8281036040840152611a5381868861199f565b90508281036060840152611a6781856119d3565b9998505050505050505050565b604081526000611a8860408301868861199f565b828103602084015261178e81858761199f565b60208152600061166160208301846119d3565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601190820152704d69736d61746368656420706172616d7360781b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115611bba57611bba611c5c565b500190565b600082611bda57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611bf957611bf9611c5c565b500290565b600082821015611c1057611c10611c5c565b500390565b60005b83811015611c30578181015183820152602001611c18565b838111156112375750506000910152565b6000600019821415611c5557611c55611c5c565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220430e56e61309be4bcb5a56d89816ac732aa09d7bd4ab186679f74874728aae3064736f6c63430008040033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"by","type":"address"},{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldItemMaxCount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newItemMaxCount","type":"uint256"}],"name":"ItemMaxCountSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"by","type":"address"},{"indexed":false,"internalType":"uint256","name":"itemId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldItemPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newItemPrice","type":"uint256"}],"name":"ItemPriceSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"by","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"itemIds","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"ItemPurchased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"by","type":"address"},{"indexed":false,"internalType":"uint256","name":"burnAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"treasuryAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"daoAmount","type":"uint256"}],"name":"NFTLWitdraw","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"by","type":"address"},{"indexed":false,"internalType":"uint256","name":"oldBurnPercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldTreasuryPercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"oldDAOPercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBurnPercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTreasuryPercentage","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDAOPercentage","type":"uint256"}],"name":"TokenPercentagesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"burnPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dao","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daoPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_items","type":"address"},{"internalType":"address","name":"_nftl","type":"address"},{"internalType":"address","name":"_treasury","type":"address"},{"internalType":"address","name":"_dao","type":"address"},{"internalType":"uint256","name":"_burnPercentage","type":"uint256"},{"internalType":"uint256","name":"_treasuryPercentage","type":"uint256"},{"internalType":"uint256","name":"_daoPercentage","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"itemMaxCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"itemPrices","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"items","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nftl","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_itemIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_amounts","type":"uint256[]"}],"name":"purchaseItems","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_itemIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_maxCounts","type":"uint256[]"}],"name":"setItemMaxCounts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_itemIds","type":"uint256[]"},{"internalType":"uint256[]","name":"_nftlAmounts","type":"uint256[]"}],"name":"setItemPrices","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryPercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_burnPercentage","type":"uint256"},{"internalType":"uint256","name":"_treasuryPercentage","type":"uint256"},{"internalType":"uint256","name":"_daoPercentage","type":"uint256"}],"name":"updateTokenPercentages","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]}